
def solution(m, n, puddles):
    map = [[0] * (m+1) for _ in range(n+1)]
    
    map[1][1] = 1 # 시작점 표시

    #웅덩이 위치 초기화
    for x,y in puddles:
        map[y][x] = -1
    
    for i in range(1, n+1):
        for j in range(1, m+1):
            #웅덩이 일떄
            if(map[i][j] == -1):
                continue
            #위에 물
            if(map[i-1][j] == -1):
                #왼쪽값만 더하기
                map[i][j] += map[i][j-1]
                continue    
            #왼쪽에 물
            if(map[i][j-1] == -1):
                #위에 값만 더하기
                map[i][j] += map[i-1][j]
                continue
            #둘다 더할때
            map[i][j] += (map[i-1][j]+map[i][j-1])

    return map[-1][-1] % 1000000007

# 1000000007 값은 int범위를 산출하기 위함.
# module 함수는 정수의 범위를 구하기 위함으로 나머지를 마지막에서 구하는게 아니라 각 값을 더 할때 구하기.
            



print(solution(4,3,[[2,2]]))



# 정확성  테스트
# 테스트 1 〉	통과 (0.01ms, 10.4MB)
# 테스트 2 〉	통과 (0.02ms, 10.2MB)
# 테스트 3 〉	통과 (0.02ms, 10.3MB)
# 테스트 4 〉	통과 (0.04ms, 10.2MB)
# 테스트 5 〉	통과 (0.13ms, 10.3MB)
# 테스트 6 〉	통과 (0.05ms, 10.2MB)
# 테스트 7 〉	통과 (0.06ms, 10.2MB)
# 테스트 8 〉	통과 (0.11ms, 10.1MB)
# 테스트 9 〉	통과 (0.05ms, 10.3MB)
# 테스트 10 〉	통과 (0.02ms, 10.2MB)
# 효율성  테스트
# 테스트 1 〉	통과 (3.55ms, 10.3MB)
# 테스트 2 〉	통과 (1.35ms, 10.3MB)
# 테스트 3 〉	통과 (1.75ms, 10.2MB)
# 테스트 4 〉	통과 (2.61ms, 10.2MB)
# 테스트 5 〉	통과 (2.30ms, 10.3MB)
# 테스트 6 〉	통과 (3.25ms, 10.4MB)
# 테스트 7 〉	통과 (2.02ms, 10.3MB)
# 테스트 8 〉	통과 (2.98ms, 10.2MB)
# 테스트 9 〉	통과 (2.53ms, 10.2MB)
# 테스트 10 〉	통과 (2.50ms, 10.2MB)